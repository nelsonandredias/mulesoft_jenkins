"""
NAME: Example Component Release Pipeline
DESCRIPTION:
- Used by devops to deploy the specified application and version. Uses bash shell.

REQUIRES:
- Standard Suggested Jenkins plugins
- Pipeline Utility Steps

"""
def logSeparator = '###########################################################################################'

def log(String message)
{
    echo "############################ [ ${message} ]  ############################"
}

def abort(String message)
{
    echo "Aborting pipeline..."
    currentBuild.result = 'ABORTED'
    error(message)
}

def deploy(String artifactId, String version, String targetEnvironment, deploymentModel, String workers, String workerSize, String usr, String pwd, String settingsFile) {

	sh "${MVN} dependency:copy -Dartifact=" + groupId + ":" + artifactId + ":" + version + ":pom -DoutputDirectory=./ -B -Du=" + usr + " -Dp=" + pwd + " -s " + settingsFile
	sh "${RENAME} " + artifactId + "-" + version + ".pom pom.xml"
	
	if (deploymentModel.equalsIgnoreCase("CloudHub")) {
 	    sh "${MVN} dependency:copy -Dartifact=" + groupId + ":" + artifactId + ":" + version + ":jar:mule-application -DoutputDirectory=./ -B -Du=" + usr + " -Dp=" + pwd + " -s " + settingsFile
        deployCloudHub( groupId,  artifactId,  version,  targetEnvironment,  workers, workerSize,  usr,  pwd,  settingsFile)
	} else {
        error('Unknown deployment Model: ' + deploymentModel)
	}	
}

def deployCloudHub(String artifactId, String version, String targetEnvironment, String workers, String workerSize, String usr, String pwd, String settingsFile) {
    sh "${MVN} mule:deploy -Dmule.artifact=" + artifactId + "-" + version + "-mule-application.jar -Pcloudhub -Denv=" + targetEnvironment + " -Dch.workers=" + workers + " -Dch.workerType=" + workerSize + " -DanypointUsername=" + usr + " -DanypointPassword=" + pwd + " --settings " + settingsFile
}

pipeline {
agent  any
 
    parameters {
      string (name: 'applicationName', defaultValue: 'peter-dunworth-testing', trim: true, description: 'The Git repository name (is required).')
      choice (name: 'targetEnvironment', choices: ['dev', 'acc', 'prd'], description: 'Deploy to environment')
      choice (name: 'deploymentType', choices: ['CloudHub'], description: 'Type of deployment')
      choice (name: 'workers', choices: ['1', '2', '3', '4', '5', '6', '7', '8'], description: 'Number of workers or instances')
      choice (name: 'workerSize', choices: ['MICRO', 'SMALL', 'MEDIUM', 'LARGE', 'XLARGE', 'XXLARGE', '4XLARGE'], description: 'Type of deployment')
      string (name: 'muleSettings', defaultValue: '/opt/maven/settings/np-settings.xml', trim: true, description: 'The settings.xml file to use for deployments (is required).')
      string (name: 'sshGitURL', defaultValue: 'git@github.com:nelsonandredias/mulesoft_jenkins.git', trim: true, description: 'The SSH Git url used to checkout source code (is required).')
    }

    environment {
        ANYPOINT_CREDENTIALS = credentials('anypointplatform')
		ANYPOINT_USER = "${ANYPOINT_CREDENTIALS_USR}"
		ANYPOINT_PASS = "${ANYPOINT_CREDENTIALS_PSW}"
        MULE_SETTINGS = 'C:\\Users\\NelsonDias\\.m2\\settings.xml'
        MVN = 'mvn'
        GIT = 'git'
        RENAME = 'mv'
    }


stages {
	stage('Checkout') {
        steps {
			script {
				echo logSeparator
				log('Checking out the Application')
				//checkout repository without triggering polling or tracking changes
				checkout changelog: false, 
					poll: false, 
					scm: [$class: 'GitSCM', 
                        branches: [[name: '*/master']], 
                        doGenerateSubmoduleConfigurations: false, 
						extensions: [[$class: 'WipeWorkspace']],
                        submoduleCfg: [],
                        gitTool: 'Default',
                        userRemoteConfigs: [[credentialsId: 'github', url: '${sshGitURL}']]]
				sh "${GIT} status"
				echo logSeparator
			}
        }
    }
	stage('Choose Version') {
		steps {
			script {
				echo logSeparator
				log('Selection Application version')
				tags = sh(script: "${GIT} tag --sort=v:refname | tail -5 ", returnStdout: true).trim()
				def tag_response = input message: 'Select the version', parameters: [choice(choices: "${tags}",  description: 'version', name: '')]
				env.tag_response = tag_response
			}
		}
	}
	stage ('Deploy') {
		steps {
			script {
				dir ("deploy") {
				deploy("${applicationName}", tag_response, "${targetEnvironment}", "${deploymentType}", "${workers}", "${workerSize}", "${ANYPOINT_USER}", "${ANYPOINT_PASS}", "${muleSettings}")
				}
			}
		}
	}
}

}